---
---

<html lang="en">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
		<title>WebGPU Game of Life</title>
	</head>
	<body>
		<h1>WebGPU Game of Life</h1>
		<canvas width="512" height="512"></canvas>
	</body>
</html>

<style>
	html,
	body {
		margin: 0;
		padding: 0;
		min-height: 100vh;
		min-width: 100vw;
		display: grid;
		place-items: center;
		position: relative;
		background: linear-gradient(to right, #000000, #434343);
		background-size: 150%;
		font-family: 'Inter', sans-serif;
	}
	h1 {
		margin: 0;
		padding: 0;
		position: absolute;
		font-size: xx-large;
		top: 50%;
		left: 50%;
		transform: translate(-50%, -50%);
		background-color: transparent;
		color: transparent;
		-webkit-mask: linear-gradient(#000 0 0) text;
		mask: linear-gradient(#000 0 0) text;
		backdrop-filter: invert(0.2) blur(0.2rem);
	}
	canvas {
		outline: 0.1rem solid rgba(0, 0, 0, 0.2);
		outline-offset: 0.1rem;
		border-radius: 0.25rem;
		background: transparent;
	}
</style>

<script type="module">
	const canvas = document.querySelector('canvas')
	if (!canvas) {
		const h1 = document.querySelector('h1')
		h1.textContent = 'Canvas not found'
		throw new Error('Canvas not found')
	}
	const resizeCanvas = () => {
		const minSide = Math.min(window.innerWidth, window.innerHeight) * 0.99
		const processedMinSide =
			minSide * (window.devicePixelRatio >= 2 ? 2 : 1)
		canvas.width = processedMinSide
		canvas.height = processedMinSide
		canvas.style.width = `${minSide}px`
		canvas.style.height = `${minSide}px`
	}
	resizeCanvas()
	const GRID_SIZE = Math.floor(Math.min(canvas.width, canvas.height) / 4)
	window.addEventListener('resize', resizeCanvas)

	if (!navigator.gpu) {
		const h1 = document.querySelector('h1')
		h1.textContent = 'your browser is not yet compatible with WebGPU'
		throw new Error('WebGPU not supported')
	}

	const adapter = await navigator.gpu.requestAdapter()
	if (!adapter) {
		const h1 = document.querySelector('h1')
		h1.textContent =
			'Adapter not found - your browser is not yet compatible with WebGPU'
		throw new Error('Adapter not found')
	}

	const device = await adapter.requestDevice()

	const context = canvas.getContext('webgpu')
	const canvasFormat = navigator.gpu.getPreferredCanvasFormat(adapter)
	context.configure({
		device: device,
		format: canvasFormat,
		alphaMode: 'premultiplied',
	})

	// render square in the middle

	const vertices = new Float32Array([
		//   X,    Y,
		-0.8,
		-0.8, // Triangle 1 (Blue)
		0.8,
		-0.8,
		0.8,
		0.8,

		-0.8,
		-0.8, // Triangle 2 (Red)
		0.8,
		0.8,
		-0.8,
		0.8,
	])

	const vertexBuffer = device.createBuffer({
		label: 'Cell vertices',
		size: vertices.byteLength,
		usage: GPUBufferUsage.VERTEX | GPUBufferUsage.COPY_DST,
	})

	device.queue.writeBuffer(vertexBuffer, /*buffer offset =>*/ 0, vertices)

	const vertexBufferLayout = {
		arrayStride: 8,
		attributes: [
			{
				format: 'float32x2',
				offset: 0,
				shaderLocation: 0, // vertex shader input position/port/plug
			},
		],
	}

	const cellShaderModule = device.createShaderModule({
		label: 'Cell shader',
		code: `

        struct VertexInput {
            @location(0) pos: vec2f,
            @builtin(instance_index) instance: u32,
        };

        struct VertexOutput {
            @builtin(position) pos: vec4f,
            @location(0) cell: vec2f,
        };


        @group(0) @binding(0) var<uniform> grid: vec2f;
        @group(0) @binding(1) var<storage> cellState: array<u32>;

        @vertex
        fn vertexMain(input: VertexInput) -> VertexOutput {

            let i = f32(input.instance); // save as float to be used in the cell variable below
            
            // Compute the cell coordinate from the instance_index
            let cell = vec2f(
                i % grid.x,
                floor(i / grid.x)
            ); // will change the target position for each instance

            let cellOffset = cell/grid * 2;

            let state = f32(cellState[input.instance]); // convert the state to float
            let gridPos = (input.pos 
            * state // turn off/on
            + 1) / grid - 1 + cellOffset;

            var output: VertexOutput;
            output.pos = vec4f(gridPos, 0, 1); // (X, Y, Z, W)
            output.cell = cell;

            return output;
        }



        @fragment
        fn fragmentMain(input: VertexOutput ) -> @location(0) vec4f {
            let cellNormalised = input.cell / grid;
            return vec4f(cellNormalised, 1 - cellNormalised.x * cellNormalised.y, 1); // (R, G, B, A)
        }
        
        `,
	})

	// LAYOUTS

	const bindGroupLayout = device.createBindGroupLayout({
		label: 'Cell Bind Group Layout',
		entries: [
			{
				binding: 0,
				visibility:
					GPUShaderStage.VERTEX |
					GPUShaderStage.COMPUTE |
					GPUShaderStage.FRAGMENT,
				buffer: {}, // uniform buffer
			},
			{
				binding: 1,
				visibility: GPUShaderStage.VERTEX | GPUShaderStage.COMPUTE,
				buffer: { type: 'read-only-storage' }, // cell state input buffer
			},
			{
				binding: 2,
				visibility: GPUShaderStage.COMPUTE,
				buffer: { type: 'storage' }, // cell state output buffer
			},
		],
	})

	const pipelineLayout = device.createPipelineLayout({
		label: 'Cell pipeline layout',
		bindGroupLayouts: [bindGroupLayout],
	})

	const cellPipeline = device.createRenderPipeline({
		label: 'Cell pipeline',
		layout: pipelineLayout,
		vertex: {
			module: cellShaderModule,
			entryPoint: 'vertexMain',
			buffers: [vertexBufferLayout],
		},
		fragment: {
			module: cellShaderModule,
			entryPoint: 'fragmentMain',
			targets: [
				{
					format: canvasFormat,
				},
			],
		},
	})

	// create a uniform buffer to represent the grid
	const uniformArray = new Float32Array([GRID_SIZE, GRID_SIZE])
	const uniformBuffer = device.createBuffer({
		label: 'Grid uniforms',
		size: uniformArray.byteLength,
		usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST,
	})
	device.queue.writeBuffer(
		uniformBuffer,
		/*buffer offset =>*/ 0,
		uniformArray,
	)

	// CELL STATE
	const cellStateArray = new Uint32Array(GRID_SIZE * GRID_SIZE)
	const cellStateStorage = [
		device.createBuffer({
			label: 'Cell State A',
			size: cellStateArray.byteLength,
			usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_DST,
		}),
		device.createBuffer({
			label: 'Cell State B',
			size: cellStateArray.byteLength,
			usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_DST,
		}),
	]

	// Randomize the starting state of the grid
	for (let i = 0; i < cellStateArray.length; ++i) {
		cellStateArray[i] = Math.random() > 0.8 ? 1 : 0
	}
	device.queue.writeBuffer(cellStateStorage[0], 0, cellStateArray)

	// Create the compute shader that will process the simulation.
	const WORKGROUP_SIZE = 8
	const simulationShaderModule = device.createShaderModule({
		label: 'Game of Life simulation shader',
		code: `

        @group(0) @binding(0) var<uniform> grid: vec2f;
        @group(0) @binding(1) var<storage> cellStateIn: array<u32>;
        @group(0) @binding(2) var<storage, read_write> cellStateOut: array<u32>;


        fn getCellIndex(cell: vec2u) -> u32 {
            return cell.y % u32(grid.y) * u32(grid.x) + (cell.x % u32(grid.x));
        }

        fn isCellActive(x: u32, y: u32) -> u32 {
            return cellStateIn[getCellIndex(vec2(x, y))];
        }


        @compute
        @workgroup_size(${WORKGROUP_SIZE}, ${WORKGROUP_SIZE}) // 8x8 is the recommended general size for parallel processing on GPUs
        fn computeMain(
            @builtin(global_invocation_id) cell: vec3u,
        ) {

            let activeNeighboursCount = isCellActive(cell.x+1, cell.y+1) +
                                        isCellActive(cell.x+1, cell.y) +
                                        isCellActive(cell.x+1, cell.y-1) +
                                        isCellActive(cell.x, cell.y-1) +
                                        isCellActive(cell.x-1, cell.y-1) +
                                        isCellActive(cell.x-1, cell.y) +
                                        isCellActive(cell.x-1, cell.y+1) +
                                        isCellActive(cell.x, cell.y+1);


            let i = getCellIndex(cell.xy);

            // game of life rules
            switch activeNeighboursCount {
                case 2: { // keep state
                    cellStateOut[i] = cellStateIn[i];
                }
                case 3: { // become active
                    cellStateOut[i] = 1;
                }
                default: { // < 2 or > 3 active neighbours --> become inactive
                    cellStateOut[i] = 0;
                }
            }
       

        }
    `,
	})

	const simulationPipeline = device.createComputePipeline({
		label: 'Simulation pipeline',
		layout: pipelineLayout,
		compute: {
			module: simulationShaderModule,
			entryPoint: 'computeMain',
		},
	})

	// pass data to the shader

	const bindGroups = [
		device.createBindGroup({
			label: 'Cell renderer bind group A',
			layout: bindGroupLayout,
			entries: [
				{
					binding: 0,
					resource: { buffer: uniformBuffer },
				},
				{
					binding: 1,
					resource: { buffer: cellStateStorage[0] },
				},
				{
					binding: 2,
					resource: { buffer: cellStateStorage[1] },
				},
			],
		}),
		device.createBindGroup({
			label: 'Cell renderer bind group B',
			layout: bindGroupLayout,
			entries: [
				{
					binding: 0,
					resource: { buffer: uniformBuffer },
				},
				{
					binding: 1,
					resource: { buffer: cellStateStorage[1] },
				},
				{
					binding: 2,
					resource: { buffer: cellStateStorage[0] },
				},
			],
		}),
	]

	// __________

	const UPDATE_INTERVAL = 16 // ~= 45fps
	let step = 0

	// Move all of our rendering code into a function
	const updateGrid = () => {
		const encoder = device.createCommandEncoder()
		const computePass = encoder.beginComputePass()
		computePass.setPipeline(simulationPipeline)
		computePass.setBindGroup(0, bindGroups[step % 2])

		const workgroupCount = Math.ceil(GRID_SIZE / WORKGROUP_SIZE) // shader to execute 32x32 times to cover the grid --> workgroup size is 8x8 --> dispatch 4x4 workgroups (4 * 8 = 32).
		computePass.dispatchWorkgroups(workgroupCount, workgroupCount) // Dispatch the compute shader

		computePass.end()

		step++ // Increment the step count

		const pass = encoder.beginRenderPass({
			colorAttachments: [
				{
					view: context.getCurrentTexture().createView(),
					loadOp: 'clear',
					clearValue: { r: 0, g: 0, b: 0, a: 0.25 },
					storeOp: 'store',
					alpha: 1,
				},
			],
		})

		// Draw the grid.
		pass.setPipeline(cellPipeline)
		pass.setBindGroup(0, bindGroups[step % 2]) // Updated!
		pass.setVertexBuffer(0, vertexBuffer)
		pass.draw(vertices.length / 2, GRID_SIZE * GRID_SIZE)

		// End the render pass and submit the command buffer
		pass.end()
		device.queue.submit([encoder.finish()])
	}

	// Schedule updateGrid() to run repeatedly
	setInterval(updateGrid, UPDATE_INTERVAL)
</script>
